//
// Copyright (c) 2024 Dmitry Arkhipov (grisumbras@yandex.ru)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

// Autogenerated from gdb_printers.py by boost-debugger-utils

#ifndef EXAMPLE_GDB_PRINTERS_HPP
#define EXAMPLE_GDB_PRINTERS_HPP

#if defined(__ELF__)

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Woverlength-strings"
#elif defined(__GNUC__)
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Woverlength-strings"
#endif

__asm__(
  ".pushsection \".debug_gdb_scripts\", \"MS\",@progbits,1\n"
  ".ascii \"\\4gdb.inlined-script.EXAMPLE_GDB_PRINTERS_HPP\\n\"\n"
  ".ascii \"import gdb\\n\"\n"
  ".ascii \"import gdb.printing\\n\"\n"


  ".ascii \"collection = gdb.printing.RegexpCollectionPrettyPrinter('Example')\\n\"\n"
  ".ascii \"def register(printer, ns=None, template=False):\\n\"\n"
  ".ascii \"    typename = getattr(printer, '__name__')\\n\"\n"
  ".ascii \"    ns = ns or 'example'\\n\"\n"
  ".ascii \"    collection.add_printer(\\n\"\n"
  ".ascii \"        typename,\\n\"\n"
  ".ascii \"        '^{ns}::{typename}{marker}'.format(\\n\"\n"
  ".ascii \"            ns=ns,\\n\"\n"
  ".ascii \"            typename=typename,\\n\"\n"
  ".ascii \"            marker='<'if template else '$'),\\n\"\n"
  ".ascii \"        printer)\\n\"\n"


  ".ascii \"class mystruct:\\n\"\n"
  ".ascii \"    def __init__(self, val):\\n\"\n"
  ".ascii \"        self.val = val\\n\"\n"

  ".ascii \"    def to_string(self):\\n\"\n"
  ".ascii \"        return 'mystruct[%s = %s]' % (\\n\"\n"
  ".ascii \"            self.val['key'], self.val['value'])\\n\"\n"
  ".ascii \"register(mystruct)\\n\"\n"


  ".ascii \"obj_file = gdb.current_objfile()\\n\"\n"
  ".ascii \"mod = obj_file or gdb\\n\"\n"
  ".ascii \"should_run = True\\n\"\n"
  ".ascii \"for printer in getattr(mod, 'pretty_printers', []):\\n\"\n"
  ".ascii \"    if getattr(printer, 'name') == collection.name:\\n\"\n"
  ".ascii \"        should_run = False\\n\"\n"
  ".ascii \"if should_run:\\n\"\n"
  ".ascii \"    gdb.printing.register_pretty_printer(obj_file, collection)\\n\"\n"
  ".byte 0\n"
  ".popsection\n");
#if defined(__clang__)
#  pragma clang diagnostic pop
#elif defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

#endif // defined(__ELF__)

#endif // EXAMPLE_GDB_PRINTERS_HPP
