#
# Copyright (c) 2024 Dmitry Arkhipov (grisumbras@yandex.ru)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/cppalliance/pretty_printers
#

import common ;
import make ;
import modules ;
import param ;
import path ;
import print ;
import project ;
import property ;
import property-set ;
import python ;
import testing ;
import toolset ;
import type ;
import "class" : new ;


rule init ( command * )
{
    if ! $(.initialized)
    {
        .initialized = true ;
    }
    else
    {
        if ! $(command)
        {
            return ;
        }
    }
    command ?= gdb ;

    GDB_COMMAND = ;
    .has-gdb = ;
    for local part in $(command)
    {
        local found = [ common.find-tool $(part) ] ;
        if $(found)
        {
            .has-gdb = true ;
        }
        else
        {
            found = $(part) ;
        }
        GDB_COMMAND += $(found) ;
    }
}

rule has-gdb
{
    return $(.has-gdb) ;
}

rule embed-gdb-extension ( target : sources + : requirements *
    : usage-requirements * )
{
    param.handle-named-params sources requirements usage-requirements ;

    make $(target)
        : $(sources)
        : @boost-pretty-printers.run-embed-gdb-extension
        : $(requirements)
          <dependency>$(.gdb-embed-script)
        : $(usage-requirements)
        ;
}

rule test-gdb-printers ( target : sources + : requirements * : default-build *
    : usage-requirements * )
{
    param.handle-named-params
        sources requirements default-build usage-requirements ;

    local project = [ project.current ] ;

    local test-runner = _$(target:S=.py) ;
    generate $(test-runner)
        : $(sources)
        : <generating-rule>@boost-pretty-printers.generate-gdb-test-runner-aux
          <dependency>$(.gdb-test-generator-script)
        ;
    $(project).mark-target-as-explicit $(test-runner) ;

    local test-program = _$(target) ;
    exe $(test-program)
        : $(sources)
        : <debug-symbols>on
          <runtime-debugging>on
          <optimization>debug
          $(requirements)
        : $(default-build)
        ;
    $(project).mark-target-as-explicit $(test-program) ;

    local test-run = _$(target)_run ;
    testing.make-test run-pyd
        : $(.gdb-test-runner-script)
        : <testing.arg>"$(GDB_COMMAND)"
          <testing.input-file>$(test-program)
          <testing.input-file>$(test-runner)
        : $(test-run)
        ;
    $(project).mark-target-as-explicit $(test-run) ;

    alias $(target)
        : $(test-run)
        : $(requirements)
        : $(default-build)
        : $(usage-requirements)
        ;
}

.here  = [ path.make [ modules.binding $(__name__) ] ] ;
.here = $(.here:D) ;
.gdb-embed-script = $(.here)/embed-gdb-extension.py ;
.gdb-test-generator-script = $(.here)/generate-gdb-test-runner.py ;
.gdb-test-runner-script = $(.here)/util/run-gdb-tests.py ;

rule run-embed-gdb-extension ( target : sources + : properties * )
{
    warn-if-not-configuered ;
    RUNNER on $(target) = [ path.native $(.gdb-embed-script) ] ;
}
actions run-embed-gdb-extension
{
    "$(PYTHON:E=python)" "$(RUNNER)" $(>[1]) $(<) $(FLAGS)
}
toolset.flags boost-pretty-printers.run-embed-gdb-extension FLAGS <flags> ;
toolset.flags boost-pretty-printers.run-embed-gdb-extension PYTHON <python.interpreter> ;

rule generate-gdb-test-runner-aux ( project name : property-set : sources + )
{
    local cpp-sources ;
    for local src in $(sources)
    {
        if [ $(src).type ] in C CPP H HPP IPP
        {
            cpp-sources += $(src) ;
        }
    }

    local action-name = boost-pretty-printers.generate-gdb-test-runner ;
    local relevant = [ toolset.relevant $(action-name) ] ;
    local reqs = [ $(property-set).relevant $(relevant) ] ;
    reqs = [ $(reqs).add-raw [ $(property-set).dependency ] ] ;
    local action = [
          new action $(cpp-sources)
        : $(action-name)
        : $(reqs)
        ] ;
    local target = [
          new file-target $(name) exact
        : [ type.type $(name) ]
        : $(project)
        : $(action)
        ] ;
    return [ property-set.empty ] $(target) ;
}

rule generate-gdb-test-runner ( target : sources + : properties * )
{
    warn-if-not-configuered ;
    RUNNER on $(target) = [ path.native $(.gdb-test-generator-script) ] ;
}
actions generate-gdb-test-runner
{
    "$(PYTHON:E=python)" "$(RUNNER)" $(>) -o $(<)
}
toolset.flags boost-pretty-printers.generate-gdb-test-runner PYTHON <python.interpreter> ;

rule warn-if-not-configuered ( )
{
    if $(.checked) { return ; }

    if ! $(.initialized)
    {
        echo "warning: module boost-pretty-printers was not initialized!" ;
        echo "  add \"using boost-pretty-printers ;\" to your build scripts." ;
    }

    if ! [ python.configured ]
    {
        echo "warning: module python was not initialized!" ;
        echo "  add \"using python ;\" to your build scripts." ;
    }

    .checked = true ;
}
